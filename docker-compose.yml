services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq-ph
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - pantohealth-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:latest
    container_name: mongodb-ph
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - pantohealth-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  consumer:
    build:
      context: .
      dockerfile: apps/consumer/Dockerfile
    container_name: consumer-ph
    ports:
      - "3000:3000"
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_QUEUE=x-ray
      - MONGO_URL=mongodb://mongodb:27017/pantohealth
      - CONSUMER_PORT=3000
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - pantohealth-network
    restart: unless-stopped

  producer:
    build:
      context: .
      dockerfile: apps/producer/Dockerfile
    container_name: producer-ph
    ports:
      - "3001:3001"
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_QUEUE=x-ray
      - PRODUCER_PORT=3001
    depends_on:
      - rabbitmq
    networks:
      - pantohealth-network
    restart: unless-stopped

networks:
  pantohealth-network:
    driver: bridge

volumes:
  mongodb_data: